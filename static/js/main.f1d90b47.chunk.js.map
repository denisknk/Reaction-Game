{"version":3,"sources":["fonts/Roboto-Thin.ttf","fonts/Roboto-Light.ttf","fonts/Roboto-Medium.ttf","Game/Levels/Dot/Dot.tsx","store/gameFlow/actions.ts","Game/utils.ts","Game/consts.ts","store/gameFlow/reducer.ts","Game/Levels/Levels.tsx","Game/HowToPlay/HowToPlay.tsx","Game/Menu/Menu.tsx","Game/Action/styles.ts","store/gameFlow/selectors.ts","Game/Action/Play.tsx","Game/Action/Action.tsx","Game/Timer/Timer.tsx","Game/End/End.tsx","Game/Game.tsx","serviceWorker.js","store/rootReducer.ts","store/rootStore.ts","App.tsx","index.tsx"],"names":["module","exports","Dot","_ref","color","blur","hover","press","React","createElement","style","backgroundColor","onMouseEnter","onClick","onMouseLeave","className","gameFlowActions","resetState","createAction","clickOnBox","gameOver","startGame","gameCondition","getRandomNumber","columnsCount","prevCoordinate","gridCount","randomNumber","Math","floor","random","GameConditions","gameFlowDefaultState","score","allScores","isGameOver","isGameStarted","currentBox","reactionTimes","currentGameCondition","Menu","selectedLevel","gameFlowReducer","createReducer","handleAction","state","payload","timeSpent","_ref2","Timer","_ref3","condition","EndScreen","Levels","dispatch","useDispatch","colors","setColors","useState","setDefaultColor","map","index","onHover","matrixWidth","onGameStart","key","HowToPlay","isOpen","updateClick","id","FontAwesomeIcon","icon","faTimesCircle","setIsOpen","faInfoCircle","value","styled","td","_templateObject","_taggedTemplateLiteral","isActive","GridContainer","div","_templateObject2","size","concat","GridItem","_templateObject3","getScore","store","gameFlow","getActiveBox","geCurrentGameCondition","getSelectedLevel","getReactionTimes","getAllScoresArray","Play","timeOut","activeBox","useSelector","timeLeft","setTimeLeft","matrix","setMatrix","arrX","arrY","length","fill","getRenderMatrix","xAxis","yAxis","startTime","setStartTime","gameBoxesArray","Array","from","_","i","useEffect","Date","now","gameOverTimer","setTimeout","clearTimeout","console","log","idx","Action","interval","setInterval","clearInterval","Game","prevSeconds","End","currentScore","averageReactionTime","total","reduce","acc","time","toFixed","getAverageReactionTime","allScoresArray","highestScore","max","averageTimeText","handleClick","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","appStore","history","middlewares","createStore","combineReducers","router","connectRouter","createRootReducer","composeWithDevTools","applyMiddleware","createRootStore","createBrowserHistory","App","getState","Provider","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.f1d90b47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Roboto-Thin.321de678.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Light.88823c20.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Medium.58aef543.ttf\";","import React from 'react';\nimport './Dot.css';\n\ninterface Props {\n  color: string;\n  blur: any;\n  hover: any;\n  press: any;\n}\n\nconst Dot: React.FC<Props> = ({ color, blur, hover, press }) => {\n  return (\n    <div\n      style={{ backgroundColor: color }}\n      onMouseEnter={hover}\n      onClick={press}\n      onMouseLeave={blur}\n      className=\"level-dot__wrapper\"\n    />\n  );\n};\n\nexport default Dot;\n","import { createAction } from 'typesafe-actions';\nimport { GameConditions } from '../../Game/consts';\n\ninterface ClickOnBox {\n  timeSpent: number;\n}\n\nexport const gameFlowActions = {\n  resetState: createAction('RESET_SCORE')<void>(),\n  clickOnBox: createAction('CLICK_ON_BOX')<ClickOnBox>(),\n  gameOver: createAction('GAME_OVER')<void>(),\n  startGame: createAction('START_GAME')<{ columnsCount: number; selectedLevel: number }>(),\n  gameCondition: createAction('GAME_CONDITION')<{ condition: GameConditions }>()\n};\n","export const getRandomNumber = (columnsCount: number, prevCoordinate?: number | null): number => {\n  const gridCount = columnsCount * columnsCount;\n  let randomNumber = Math.floor(Math.random() * gridCount);\n  while (randomNumber === prevCoordinate) {\n    randomNumber = Math.floor(Math.random() * gridCount);\n  }\n\n  return randomNumber;\n};\n\nexport const getRenderMatrix = (columnsCount: number) => {\n  const arrX: number[] = [];\n  const arrY: number[] = [];\n  arrX.length = columnsCount;\n  arrX.fill(1);\n  arrY.length = columnsCount;\n  arrY.fill(1);\n  return [arrX, arrY];\n};\n\nexport const getAverageReactionTime = (reactionTimes: number[]): number => {\n  const total = reactionTimes.reduce((acc, time) => acc + time, 0);\n  if (total === 0) return 0;\n  const average = total / reactionTimes.length;\n  return +average.toFixed(0);\n};\n","export const gameConditions = {\n  menu: 'menu',\n  timer: 'timer',\n  action: 'action',\n  end: 'end'\n};\n\nexport enum GameConditions {\n  Menu = 'menu',\n  Game = 'game',\n  Timer = 'timer',\n  EndScreen = 'endScreen'\n}\n\nexport const emptyValuePlaceholder = '--';\n","import { ActionType, createReducer } from 'typesafe-actions';\nimport { gameFlowActions } from './actions';\nimport { getRandomNumber } from '../../Game/utils';\nimport { GameConditions } from '../../Game/consts';\n\nexport interface GameFlowState {\n  score: number;\n  allScores: number[];\n  isGameStarted: boolean;\n  isGameOver: boolean;\n  currentBox: null | number;\n  reactionTimes: number[];\n  currentGameCondition: GameConditions;\n  selectedLevel: number;\n}\n\nconst gameFlowDefaultState: GameFlowState = {\n  score: 0,\n  allScores: [],\n  isGameOver: false,\n  isGameStarted: false,\n  currentBox: null,\n  reactionTimes: [],\n  currentGameCondition: GameConditions.Menu,\n  selectedLevel: 0\n};\n\nexport const gameFlowReducer = createReducer<GameFlowState, ActionType<typeof gameFlowActions>>(gameFlowDefaultState)\n  .handleAction(\n    gameFlowActions.resetState,\n    (state): GameFlowState => ({\n      ...state,\n      ...gameFlowDefaultState,\n      allScores: state.allScores\n    })\n  )\n  .handleAction(\n    gameFlowActions.clickOnBox,\n    (state, { payload }): GameFlowState => ({\n      ...state,\n      reactionTimes: [...state.reactionTimes, payload.timeSpent],\n      score: state.score + 1,\n      currentBox: getRandomNumber(state.selectedLevel + 3, state.currentBox)\n    })\n  )\n  .handleAction(\n    gameFlowActions.startGame,\n    (state, { payload }): GameFlowState => ({\n      ...state,\n      isGameStarted: true,\n      isGameOver: false,\n      reactionTimes: [],\n      currentBox: getRandomNumber(payload.columnsCount),\n      currentGameCondition: GameConditions.Timer,\n      selectedLevel: payload.selectedLevel\n    })\n  )\n  .handleAction(\n    gameFlowActions.gameCondition,\n    (state, { payload }): GameFlowState => ({\n      ...state,\n      currentGameCondition: payload.condition,\n      ...(payload.condition === GameConditions.EndScreen\n        ? {\n            isGameOver: true,\n            isGameStarted: false,\n            currentBox: null,\n            allScores: [...state.allScores, state.score]\n          }\n        : {})\n    })\n  )\n  .handleAction(\n    gameFlowActions.gameOver,\n    (state): GameFlowState => ({\n      ...state,\n      isGameOver: true,\n      isGameStarted: false,\n      currentBox: null\n    })\n  );\n","import React, { Component, useState } from 'react';\nimport './Levels.css';\nimport Dot from './Dot/Dot';\nimport { useDispatch } from 'react-redux';\nimport { gameFlowActions } from '../../store/gameFlow';\nimport { GameConditions } from '../consts';\nimport { startTimeCount } from '../../services/all';\n// import { Link } from \"react-router-dom\";\n\nconst Levels: React.FC = () => {\n  const dispatch = useDispatch();\n  const [colors, setColors] = useState(['#555555', '#555555', '#555555']);\n\n  const setDefaultColor = () => {\n    setColors(['#555555', '#555555', '#555555']);\n  };\n\n  const onHover = (index: number) => {\n    switch (index) {\n      case 0:\n        setColors(['#59DB28', '#555555', '#555555']);\n        break;\n      case 1:\n        setColors(['#F6B921', '#F6B921', '#555555']);\n\n        break;\n      case 2:\n        setColors(['#CA0424', '#CA0424', '#CA0424']);\n\n        break;\n      default:\n        return;\n    }\n  };\n\n  const onGameStart = (index: number) => {\n    const matrixWidth = index + 3;\n    dispatch(gameFlowActions.startGame({ columnsCount: matrixWidth, selectedLevel: index }));\n  };\n\n  const onSelect = (index: number) => {\n    let timeOut: any;\n    switch (index) {\n      case 0:\n        timeOut = 1700;\n        break;\n      case 1:\n        timeOut = 1400;\n        break;\n      case 2:\n        timeOut = 540;\n        break;\n      default:\n        return;\n    }\n    dispatch(gameFlowActions.gameCondition({ condition: GameConditions.Game }));\n    setTimeout(() => {\n      dispatch(gameFlowActions.gameCondition({ condition: GameConditions.Game })); // changeLevel(index, GameConditions.Action);\n      startTimeCount();\n      // handleTimeout(changeLevel, timeOut);\n    }, 3000);\n  };\n\n  return (\n    <div className=\"levels__wrapper\">\n      {colors.map((color, index) => (\n        <Dot\n          color={color}\n          blur={setDefaultColor}\n          hover={() => onHover(index)}\n          // press={() => onSelect(index)}\n          press={() => onGameStart(index)}\n          key={index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Levels;\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport '../../App.css';\n\ninterface Props {\n  isOpen: boolean;\n  updateClick: (val: boolean) => void;\n}\n\nconst HowToPlay: React.FC<Props> = ({ isOpen, updateClick }) => {\n  if (isOpen) {\n    return (\n      <div id=\"howToPlay\">\n        <FontAwesomeIcon\n          icon={faTimesCircle}\n          className=\"info-icon\"\n          onClick={() => {\n            updateClick(false);\n          }}\n        />\n        <div className=\"how-toplay__header\">\n          <p>Правила игры</p>{' '}\n        </div>\n        <div className=\"instraction-list\">\n          <ol>\n            <li>\n              Выберите уровень сложности кликнув на одну из трех точек. Самый\n              легкий уровень слева.\n            </li>\n            <li>\n              Таймер отсчитает 3 секунды чтобы у вас было время приготовиться.\n            </li>\n            <li>\n              В зависимости от выбранного уровня вы увидите сетку из\n              прямоугольников 3*3 для легкого, 4*4 для среднего, и 5*5 для\n              сложного уровней\n            </li>\n            <li>\n              Один из прямоугольников будет закрашен в зеленый цвет, вам нужно\n              успеть кликнуть по нему, иначе игра окончена.\n            </li>\n            <li>\n              Игра начнется в медленном темпе для легкого уровня, и среднем для\n              сложного уровня.\n            </li>\n            <li>\n              Каждый раз кликая по прямоугольнику вы зарабатываете 1 балл, и\n              одновременно появлятся новый зеленый прямоугольник{' '}\n            </li>\n            <li>\n              Продолжайте играть до тех пор пока игра не станет слишком быстрой.\n            </li>\n          </ol>\n        </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default HowToPlay;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport Levels from '../Levels/Levels';\nimport HowToPlay from '../HowToPlay/HowToPlay';\nimport '../../App.css';\n\nconst Menu: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const updateClick = (value: boolean) => {\n    setIsOpen(value);\n  };\n\n  return (\n    <div className=\"body_wrapper\">\n      <FontAwesomeIcon icon={faInfoCircle} className=\"info-icon\" onClick={() => setIsOpen(true)} />\n      <HowToPlay isOpen={isOpen} updateClick={updateClick} />\n      <div className=\"instructions\">Choose Difficulty Level</div>\n      <Levels />\n    </div>\n  );\n};\n\nexport default Menu;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.td<{ isActive?: boolean }>`\n  ${({ isActive }) => (isActive ? 'background-color: #4ade9b' : null)}\n`;\n\nexport const GridContainer = styled.div<{ size: number }>`\n  display: grid;\n  gap: 2px;\n  ${({ size }) => `grid-template-columns: repeat(${size}, 1fr);`}\n  width: 100vw;\n  height: 100vh;\n  padding: 2px;\n  box-sizing: border-box;\n`;\n\nexport const GridItem = styled.div<{ isActive?: boolean }>`\n  width: 100%;\n  position: relative;\n  ${({ isActive }) => (isActive ? 'background-color: #4ade9b' : null)};\n  border: solid 3px #4ade9b;\n  box-sizing: border-box;\n`;\n","import { RootState } from '../rootReducer';\n\nexport const getScore = (store: RootState) => store.gameFlow.score;\nexport const getActiveBox = (store: RootState) => store.gameFlow.currentBox;\nexport const geCurrentGameCondition = (store: RootState) => store.gameFlow.currentGameCondition;\nexport const getSelectedLevel = (store: RootState) => store.gameFlow.selectedLevel;\nexport const getReactionTimes = (store: RootState) => store.gameFlow.reactionTimes;\nexport const getAllScoresArray = (store: RootState) => store.gameFlow.allScores;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Action.css';\nimport { getRenderMatrix } from '../utils';\nimport { GridContainer, GridItem, StyledCell } from './styles';\nimport { gameFlowActions } from '../../store/gameFlow';\nimport { getActiveBox, getReactionTimes, getScore, getSelectedLevel } from '../../store/gameFlow/selectors';\nimport { GameConditions } from '../consts';\n\ninterface Props {\n  columnsCount: number;\n  timeOut: any;\n}\n\nconst Play: React.FC<Props> = ({ columnsCount, timeOut }) => {\n  const dispatch = useDispatch();\n  const currentScore = useSelector(getScore);\n  const activeBox = useSelector(getActiveBox);\n  const selectedLevel = useSelector(getSelectedLevel);\n\n  const [timeLeft, setTimeLeft] = useState(3);\n  const [matrix, setMatrix] = useState(getRenderMatrix(columnsCount));\n  const [xAxis, yAxis] = matrix;\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const gameBoxesArray = Array.from({ length: columnsCount * columnsCount }, (_, i) => i);\n  const { gameOver, clickOnBox, gameCondition } = gameFlowActions;\n\n  // useEffect(() => {\n  //   const interval = setTimeout(() => {\n  //     if (!isGameStarted) {\n  //       changeLevel(columnsCount - 2, GameConditions.End);\n  //     }\n  //     clearInterval(interval);\n  //   }, timeOut);\n  //\n  //   return () => clearInterval(interval);\n  // }, []);\n\n  useEffect(() => {\n    setStartTime(Date.now());\n    const gameOverTimer = setTimeout(() => {\n      dispatch(gameCondition({ condition: GameConditions.EndScreen }));\n      // changeLevel(columnsCount - 2, GameConditions.End);\n    }, timeOut);\n\n    return () => clearTimeout(gameOverTimer);\n  }, [activeBox, dispatch]);\n\n  // const handleBoxClick = (index: number) => {\n  //   if (index === gameState.currentBox) {\n  //     const reactionTime = Date.now() - (startTime as number);\n  //     dispatch(clickBox(reactionTime));\n  //     setStartTime(Date.now());\n  //   }\n  // };\n\n  const onClick = (clickedIndex: number) => {\n    const isCurrentBoxActive = activeBox === clickedIndex;\n    if (isCurrentBoxActive) {\n      dispatch(clickOnBox({ timeSpent: Date.now() - (startTime as number) }));\n    } else {\n      // getAverageReactionTime();\n      dispatch(gameCondition({ condition: GameConditions.EndScreen }));\n    }\n  };\n\n  console.log('activeBox', activeBox);\n\n  return (\n    <GridContainer size={columnsCount}>\n      {gameBoxesArray.map(idx => (\n        <GridItem isActive={idx === activeBox} key={idx} onClick={() => onClick(idx)} />\n      ))}\n    </GridContainer>\n  );\n};\n\nexport default Play;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './Action';\nimport Play from './Play';\nimport { getSelectedLevel } from '../../store/gameFlow/selectors';\n\nconst Action: React.FC = () => {\n  const selectedLevel = useSelector(getSelectedLevel);\n\n  switch (selectedLevel) {\n    case 0:\n      return <Play columnsCount={3} timeOut={1700} />;\n    case 1:\n      return <Play columnsCount={4} timeOut={1400} />;\n    case 2:\n      return <Play columnsCount={5} timeOut={1000} />;\n    default:\n      return null;\n  }\n};\n\nexport default Action;\n","import React, { useEffect, useState } from 'react';\nimport './Timer.css';\nimport { gameFlowActions } from '../../store/gameFlow';\nimport { GameConditions } from '../consts';\nimport { useDispatch } from 'react-redux';\n\nconst Timer = () => {\n  const dispatch = useDispatch();\n  const [timeLeft, setTimeLeft] = useState(3);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (timeLeft === 1) {\n        clearInterval(interval);\n        dispatch(gameFlowActions.gameCondition({ condition: GameConditions.Game }));\n      }\n      setTimeLeft(prevSeconds => prevSeconds - 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [timeLeft]);\n\n  return (\n    <div className=\"body_wrapper\">\n      <div className=\"instructions\">Choose Difficulty Level</div>\n      <div className=\"timer-wrapper\">{timeLeft}</div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './End.css';\nimport { emptyValuePlaceholder, GameConditions } from '../consts';\nimport { getAllScoresArray, getReactionTimes, getScore } from '../../store/gameFlow/selectors';\nimport { gameFlowActions } from '../../store/gameFlow';\nimport { getAverageReactionTime } from '../utils';\n\nconst End: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentScore = useSelector(getScore);\n  const reactionTimes = useSelector(getReactionTimes);\n  const averageReactionTime = getAverageReactionTime(reactionTimes);\n  const allScoresArray = useSelector(getAllScoresArray);\n  const handleClick = () => {\n    dispatch(gameFlowActions.resetState());\n    dispatch(gameFlowActions.gameCondition({ condition: GameConditions.Menu }));\n  };\n  const highestScore = Math.max(...allScoresArray);\n  const averageTimeText = averageReactionTime ? `${averageReactionTime} milliseconds` : emptyValuePlaceholder;\n\n  return (\n    <div className=\"body_wrapper\">\n      <div id=\"gameover\">\n        <span className=\"gameoverheader\">GAME OVER!</span>\n        <div className=\"title_header\">Average Reaction Time</div>\n        <span className=\"title_body\">{averageTimeText}</span>\n        <div className=\"title_header\">Score</div>\n        <span className=\"title_body\">{currentScore || emptyValuePlaceholder}</span>\n        <div className=\"title_header\">Highest Score</div>\n        <span className=\"title_body\">{highestScore}</span>\n        <span className=\"restart\" onClick={handleClick}>\n          Restart\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default End;\n","import React, { useState } from 'react';\nimport '../App.css';\nimport Menu from './Menu/Menu';\nimport Action from './Action/Action';\nimport Timer from './Timer/Timer';\nimport End from './End/End';\nimport { GameConditions } from './consts';\nimport { geCurrentGameCondition } from '../store/gameFlow/selectors';\nimport { useSelector } from 'react-redux';\n\nconst Game: React.FC = () => {\n  const currentGameCondition = useSelector(geCurrentGameCondition);\n\n  switch (currentGameCondition) {\n    case GameConditions.Menu:\n      return <Menu />;\n    case GameConditions.Timer:\n      return <Timer />;\n    case GameConditions.Game:\n      return <Action />;\n    case GameConditions.EndScreen:\n      return <End />;\n    default:\n      return <Menu />;\n  }\n};\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport { History } from 'history';\nimport { gameFlowReducer, GameFlowState } from './gameFlow';\n\nexport type RootState = {\n  gameFlow: GameFlowState;\n};\n\nexport const createRootReducer = (history: History<any>) =>\n  combineReducers({\n    router: connectRouter(history),\n    gameFlow: gameFlowReducer\n  });\n","import createSagaMiddleware, { SagaMiddleware } from 'redux-saga';\nimport { createStore, applyMiddleware } from 'redux';\nimport { History } from 'history';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createRootReducer } from './rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const createRootStore = (history: History) => {\n  const middlewares = [sagaMiddleware];\n  return createStore(createRootReducer(history), composeWithDevTools(applyMiddleware(...middlewares)));\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport Game from './Game/Game';\nimport * as serviceWorker from './serviceWorker';\nimport { createRootStore } from './store/rootStore';\n\nexport const appHistory = createBrowserHistory();\nexport const appStore = createRootStore(appHistory);\n\nconst App = () => {\n  const state = appStore.getState();\n\n  return (\n    <Provider store={appStore}>\n      <Game />\n    </Provider>\n  );\n};\n\nexport default App;\n\nserviceWorker.unregister();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport './fonts/Roboto-Thin.ttf';\nimport './fonts/Roboto-Light.ttf';\nimport './fonts/Roboto-Medium.ttf';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}