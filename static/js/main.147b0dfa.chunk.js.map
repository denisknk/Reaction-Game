{"version":3,"sources":["fonts/Roboto-Thin.ttf","fonts/Roboto-Light.ttf","fonts/Roboto-Medium.ttf","Game/Levels/Dot/Dot.js","Game/Levels/Levels.js","Game/HowToPlay/HowToPlay.js","services/all.js","Game/Menu/Menu.js","Game/Action/Play.js","Game/Action/Action.js","Game/Timer/Timer.js","Game/End/End.js","Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dot","_ref","color","blur","hover","press","React","createElement","style","backgroundColor","onMouseEnter","onClick","onMouseLeave","className","Levels","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","colors","setDefaultColor","setState","onHover","index","_createClass","key","value","_this2","this","map","props","onSelect","Component","howToPlay","isOpen","id","FontAwesomeIcon","icon","faTimesCircle","updateClick","Fragment","openBig","eventListeners","score","highestScore","startTime","endTime","timeDiff","countCheck","averageReactionTime","emmit","forEach","fn","startTimeCount","Date","getAverageReactionTime","timeToReturn","reduce","acc","currVal","toFixed","handleTimeout","changeLevel","timeOut","setTimeout","console","log","Menu","faInfoCircle","HowToPlay","Play","column","randomNumber","Math","floor","random","_useState","useState","_useState2","_slicedToArray","check","setCheck","_useState3","_useState4","lastRandomNumber","setLastRandomNumber","arr1","arr2","fill","val","push","createRandom","rand1","rand2","el","ind","indd","Action","level","Timer","timeLeft","redirect","clearInterval","timer","setInterval","End","averageReaction","Game","gameConditions","menu","action","end","width","height","gameCondition","number","condition","updateWindowDimensions","window","innerWidth","innerHeight","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.147b0dfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Roboto-Thin.321de678.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Light.88823c20.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Medium.58aef543.ttf\";","import React from \"react\";\nimport \"./Dot.css\";\nexport default function Dot({ color, blur, hover, press }) {\n  return (\n    <div\n      style={{ backgroundColor: color }}\n      onMouseEnter={hover}\n      onClick={press}\n      onMouseLeave={blur}\n      className=\"level-dot__wrapper\"\n    ></div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./Levels.css\";\nimport Dot from \"./Dot/Dot\";\n// import { Link } from \"react-router-dom\";\n\nclass Levels extends Component {\n  state = {\n    colors: [\"#555555\", \"#555555\", \"#555555\"],\n  };\n\n  setDefaultColor = () => {\n    this.setState(() => ({\n      colors: [\"#555555\", \"#555555\", \"#555555\"],\n    }));\n  };\n\n  onHover = (index) => () => {\n    switch (index) {\n      case 0:\n        this.setState(() => ({\n          colors: [\"#59DB28\", \"#555555\", \"#555555\"],\n        }));\n        break;\n      case 1:\n        this.setState(() => ({\n          colors: [\"#F6B921\", \"#F6B921\", \"#555555\"],\n        }));\n        break;\n      case 2:\n        this.setState(() => ({\n          colors: [\"#CA0424\", \"#CA0424\", \"#CA0424\"],\n        }));\n        break;\n      default:\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"levels__wrapper\">\n        {this.state.colors.map((color, index) => (\n          <Dot\n            color={color}\n            blur={this.setDefaultColor}\n            hover={this.onHover(index)}\n            press={() => this.props.onSelect(index)}\n            key={index}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Levels;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../../App.css\";\n\nclass howToPlay extends Component {\n  state = {\n    isOpen: this.props.isOpen,\n  };\n\n  openBig() {\n    if (this.props.isOpen) {\n      return (\n        <div id=\"howToPlay\">\n          <FontAwesomeIcon\n            icon={faTimesCircle}\n            className=\"info-icon\"\n            onClick={() => {\n              this.props.updateClick(false);\n            }}\n          />\n          <div className=\"how-toplay__header\">\n            <p>Правила игры</p>{\" \"}\n          </div>\n          <div className=\"instraction-list\">\n            <ol>\n              <li>\n                Выберите уровень сложности кликнув на одну из трех точек. Самый\n                легкий уровень слева.\n              </li>\n              <li>\n                Таймер отсчитает 3 секунды чтобы у вас было время приготовиться.\n              </li>\n              <li>\n                В зависимости от выбранного уровня вы увидите сетку из\n                прямоугольников 3*3 для легкого, 4*4 для среднего, и 5*5 для\n                сложного уровней\n              </li>\n              <li>\n                Один из прямоугольников будет закрашен в зеленый цвет, вам нужно\n                успеть кликнуть по нему, иначе игра окончена.\n              </li>\n              <li>\n                Игра начнется в медленном темпе для легкого уровня, и среднем\n                для сложного уровня.\n              </li>\n              <li>\n                Каждый раз кликая по прямоугольнику вы зарабатываете 1 балл, и\n                одновременно появлятся новый зеленый прямоугольник{\" \"}\n              </li>\n              <li>\n                Продолжайте играть до тех пор пока игра не станет слишком\n                быстрой.\n              </li>\n            </ol>\n          </div>\n        </div>\n      );\n    } else {\n      return;\n    }\n  }\n  render() {\n    return <>{this.openBig()}</>;\n  }\n}\n\nexport default howToPlay;\n","let eventListeners = [];\nlet score = 0;\nlet highestScore = 0;\nlet startTime = 0;\nlet endTime = 0;\nlet timeDiff = 0;\n// let changedTimeOut = 0;\nlet countCheck = 0;\nconst averageReactionTime = [];\n// import { minReactionTime } from \"../Game/timings\";\n\nfunction emmit() {\n  eventListeners.forEach((fn) => {\n    fn();\n  });\n}\n\nfunction addEventListener(fn) {\n  eventListeners.push(fn);\n}\n\nconst updateScore = () => {\n  score = score + 1;\n  if (score >= highestScore) {\n    highestScore = score;\n  }\n\n  emmit();\n};\nconst clearScore = () => {\n  score = 0;\n  countCheck = 0;\n  emmit();\n};\n\nconst getScore = () => {\n  return score;\n};\nconst getHighestScore = () => {\n  return highestScore;\n};\n\nfunction startTimeCount() {\n  startTime = new Date();\n  emmit();\n}\n\nfunction makeTimeDiff() {\n  endTime = new Date();\n  timeDiff = endTime - startTime;\n}\n\nfunction endTimeCount() {\n  endTime = new Date();\n  timeDiff = endTime - startTime; //in ms\n  averageReactionTime.push(timeDiff);\n  // console.log(timeDiff);\n  startTimeCount();\n\n  emmit();\n}\n\nfunction getAverageReactionTime() {\n  if (averageReactionTime.length === 0) return;\n  let timeToReturn = averageReactionTime.reduce((acc, currVal) => {\n    return acc + currVal;\n  });\n  timeToReturn = timeToReturn / averageReactionTime.length;\n  // console.log(timeToReturn.toFixed(3));\n  return timeToReturn.toFixed(3);\n}\n\nfunction getTimeDiff() {\n  return timeDiff;\n}\n\nfunction getAverageReactionTimeArray() {\n  return averageReactionTime;\n}\n\nfunction handleTimeout(changeLevel, timeOut) {\n  setTimeout(() => {\n    if (\n      averageReactionTime.length === 0 ||\n      averageReactionTime.length === countCheck\n    ) {\n      console.log(\"не успел\", getTimeDiff());\n      changeLevel(1, \"end\");\n      return;\n    }\n    countCheck = averageReactionTime.length;\n  }, timeOut);\n}\n\nexport {\n  updateScore,\n  addEventListener,\n  getScore,\n  getHighestScore,\n  clearScore,\n  startTimeCount,\n  endTimeCount,\n  getAverageReactionTime,\n  getTimeDiff,\n  makeTimeDiff,\n  getAverageReactionTimeArray,\n  handleTimeout,\n};\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Levels from \"../Levels/Levels.js\";\nimport HowToPlay from \"../HowToPlay/HowToPlay.js\";\nimport \"../../App.css\";\nimport PropTypes from \"prop-types\";\nimport { startTimeCount, handleTimeout } from \"../../services/all.js\";\n\nclass Menu extends Component {\n  state = {\n    isOpen: false,\n  };\n  updateClick = (value) => {\n    this.setState({ isOpen: value });\n  };\n  onSelect = (index) => {\n    let timeOut;\n    switch (index) {\n      case 0:\n        timeOut = 1700;\n        break;\n      case 1:\n        timeOut = 1400;\n        break;\n      case 2:\n        timeOut = 540;\n        break;\n      default:\n        return;\n    }\n    this.props.changeLevel(index, \"timer\");\n    setTimeout(() => {\n      this.props.changeLevel(index, \"action\");\n      startTimeCount();\n      handleTimeout(this.props.changeLevel, timeOut);\n    }, 3000);\n  };\n  render() {\n    return (\n      <div className=\"body_wrapper\">\n        <FontAwesomeIcon\n          icon={faInfoCircle}\n          className=\"info-icon\"\n          onClick={() => this.setState(() => ({ isOpen: true }))}\n        />\n        <HowToPlay isOpen={this.state.isOpen} updateClick={this.updateClick} />\n        <div className=\"instructions\">Choose Difficulty Level</div>\n        <Levels onSelect={this.onSelect} />\n      </div>\n    );\n  }\n}\n\nMenu.propTypes = {\n  changeLevel: PropTypes.func,\n};\n\nexport default Menu;\n","import React, { useState } from \"react\";\nimport \"./Action.css\";\nimport PropTypes from \"prop-types\";\nimport {\n  updateScore,\n  endTimeCount,\n  getAverageReactionTime,\n  handleTimeout,\n} from \"../../services/all\";\n\nconst Play = ({ column, changeLevel, timeOut }) => {\n  const randomNumber = () => {\n    return Math.floor(Math.random() * column) + 1;\n  };\n  const createRandom = () => {\n    let rand1 = randomNumber();\n    let rand2 = randomNumber();\n    if (rand1 !== lastRandomNumber[0] && rand2 !== lastRandomNumber[1]) {\n      setLastRandomNumber([rand1, rand2]);\n      return [rand1, rand2];\n    }\n    createRandom();\n  };\n  const [check, setCheck] = useState(false);\n  const [lastRandomNumber, setLastRandomNumber] = useState([\n    randomNumber(),\n    randomNumber(),\n  ]);\n  let arr1 = [];\n  let arr2 = []; // двумерный массив\n  arr1.length = column;\n  arr1.fill(1);\n  arr2.length = column;\n  arr2.fill(1);\n  const style = { backgroundColor: \"rgb(74, 222, 155)\" };\n  // const  = () => {\n\n  // }\n  const onClick = (val) => {\n    // if (reactionTime > minReactionTime) {\n    //   changeLevel(column - 2, \"end\");\n    //   return;\n    // }\n    endTimeCount();\n    // console.log(\"we're here\", val);\n    if (val) {\n      handleTimeout(changeLevel, timeOut);\n      // console.log(\"were here\");\n      updateScore(); // добавляем балл за правильно нажатый квадратик\n      setCheck(true); // сравнить рандомы тут, иметь переменную в которой хранить прошлое значение квадратика\n    } else {\n      console.log(false);\n      getAverageReactionTime();\n      changeLevel(column - 2, \"end\");\n    }\n  };\n  if (check) {\n    createRandom();\n    setCheck(false);\n  }\n  // логика должна остатьтся максимально до рендера\n  // чекать время в сервисе и счет тоже, история,\n\n  return (\n    <table>\n      <tbody>\n        {arr1.map((el, ind) => {\n          return (\n            <tr key={ind}>\n              {arr2.map((el, indd) => {\n                if (\n                  ind + 1 === lastRandomNumber[0] &&\n                  indd + 1 === lastRandomNumber[1]\n                ) {\n                  return (\n                    <td\n                      key={indd}\n                      style={style}\n                      onClick={() => onClick(true)}\n                    ></td>\n                  );\n                }\n                return <td key={indd} onClick={() => onClick(false)}></td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nPlay.propTypes = {\n  changeLevel: PropTypes.func,\n};\nexport default Play;\n","import React, { Component } from \"react\";\nimport \"./Action.css\";\nimport Play from \"./Play.js\";\n\nclass Action extends Component {\n  render() {\n    switch (this.props.level) {\n      case 0:\n        return (\n          <Play\n            column={3}\n            changeLevel={this.props.changeLevel}\n            timeOut={1700}\n          />\n        );\n      case 1:\n        return (\n          <Play\n            column={4}\n            changeLevel={this.props.changeLevel}\n            timeOut={1400}\n          />\n        );\n      case 2:\n        return (\n          <Play\n            column={5}\n            changeLevel={this.props.changeLevel}\n            timeOut={1000}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n}\n\nexport default Action;\n","import React, { Component } from \"react\";\nimport \"./Timer.css\";\n\nclass Timer extends Component {\n  state = {\n    timeLeft: 3,\n    redirect: false,\n  };\n\n  componentDidMount() {\n    // this.startTimer();\n    clearInterval(this.state.timer);\n    let timer = setInterval(() => {\n      let timeLeft = this.state.timeLeft - 1;\n      if (timeLeft === 1) {\n        clearInterval(timer);\n        this.setState(() => ({\n          redirect: true,\n        }));\n      }\n      this.setState(() => ({\n        timeLeft: timeLeft,\n      }));\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"body_wrapper\">\n        <div className=\"instructions\">Choose Difficulty Level</div>\n        <div className=\"timer-wrapper\">{this.state.timeLeft}</div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport \"./End.css\";\nimport { clearScore } from \"../../services/all\";\n\nconst End = ({ averageReaction, score, highestScore, changeLevel }) => {\n  const handleClick = () => {\n    clearScore();\n    changeLevel(1, \"menu\");\n  };\n  return (\n    <div className=\"body_wrapper\">\n      <div id=\"gameover\">\n        <span className=\"gameoverheader\">GAME OVER!</span>\n        <div className=\"title_header\">Average Reaction Time</div>\n        <span className=\"title_body\">{averageReaction} milliseconds</span>\n        <div className=\"title_header\">Score</div>\n        <span className=\"title_body\">{score}</span>\n        <div className=\"title_header\">Highest Score</div>\n        <span className=\"title_body\">{highestScore}</span>\n        <span className=\"restart\" onClick={handleClick}>\n          Restart\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default End;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport Menu from \"./Menu/Menu.js\";\nimport Action from \"./Action/Action.js\";\nimport Timer from \"./Timer/Timer.js\";\nimport End from \"./End/End.js\";\nimport {\n  getScore,\n  getHighestScore,\n  getAverageReactionTime,\n} from \"../services/all\";\nimport { addEventListener } from \"../services/all\";\n\nclass Game extends Component {\n  gameConditions = {\n    menu: \"menu\",\n    timer: \"timer\",\n    action: \"action\",\n    end: \"end\",\n  };\n\n  state = {\n    width: 0,\n    height: 0,\n    level: null,\n    gameCondition: this.gameConditions.menu,\n  };\n\n  changeLevel = (number, condition) => {\n    this.setState(() => ({\n      level: number,\n      gameCondition: condition,\n    }));\n  };\n\n  componentDidMount() {\n    addEventListener(() => {\n      this.setState(() => ({\n        score: getScore(),\n        highestScore: getHighestScore(),\n        averageReaction: getAverageReactionTime(),\n      }));\n    });\n\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => {\n    this.setState(() => ({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    }));\n  };\n  render() {\n    // console.log(this.state);\n    switch (this.state.gameCondition) {\n      case this.gameConditions.menu:\n        return <Menu changeLevel={this.changeLevel} />;\n      case this.gameConditions.timer:\n        return <Timer />;\n      case this.gameConditions.action:\n        return (\n          <Action level={this.state.level} changeLevel={this.changeLevel} />\n        );\n      case this.gameConditions.end:\n        return (\n          <End\n            score={this.state.score}\n            highestScore={this.state.highestScore}\n            changeLevel={this.changeLevel}\n            averageReaction={this.state.averageReaction}\n          />\n        );\n      default:\n        return <Menu changeLevel={this.changeLevel} />;\n    }\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport Game from \"./Game/Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Game />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./fonts/Roboto-Thin.ttf\";\nimport \"./fonts/Roboto-Light.ttf\";\nimport \"./fonts/Roboto-Medium.ttf\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}